// Code generated by MockGen. DO NOT EDIT.
// Source: golang.sigsum.org/sigsum-log-go/pkg/state (interfaces: StateManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "golang.sigsum.org/sigsum-log-go/pkg/types"
)

// MockStateManager is a mock of StateManager interface.
type MockStateManager struct {
	ctrl     *gomock.Controller
	recorder *MockStateManagerMockRecorder
}

// MockStateManagerMockRecorder is the mock recorder for MockStateManager.
type MockStateManagerMockRecorder struct {
	mock *MockStateManager
}

// NewMockStateManager creates a new mock instance.
func NewMockStateManager(ctrl *gomock.Controller) *MockStateManager {
	mock := &MockStateManager{ctrl: ctrl}
	mock.recorder = &MockStateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateManager) EXPECT() *MockStateManagerMockRecorder {
	return m.recorder
}

// AddCosignature mocks base method.
func (m *MockStateManager) AddCosignature(arg0 context.Context, arg1 *[32]byte, arg2 *[64]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCosignature", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCosignature indicates an expected call of AddCosignature.
func (mr *MockStateManagerMockRecorder) AddCosignature(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCosignature", reflect.TypeOf((*MockStateManager)(nil).AddCosignature), arg0, arg1, arg2)
}

// Cosigned mocks base method.
func (m *MockStateManager) Cosigned(arg0 context.Context) (*types.CosignedTreeHead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cosigned", arg0)
	ret0, _ := ret[0].(*types.CosignedTreeHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cosigned indicates an expected call of Cosigned.
func (mr *MockStateManagerMockRecorder) Cosigned(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cosigned", reflect.TypeOf((*MockStateManager)(nil).Cosigned), arg0)
}

// Latest mocks base method.
func (m *MockStateManager) Latest(arg0 context.Context) (*types.SignedTreeHead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest", arg0)
	ret0, _ := ret[0].(*types.SignedTreeHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Latest indicates an expected call of Latest.
func (mr *MockStateManagerMockRecorder) Latest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*MockStateManager)(nil).Latest), arg0)
}

// Run mocks base method.
func (m *MockStateManager) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockStateManagerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStateManager)(nil).Run), arg0)
}

// ToSign mocks base method.
func (m *MockStateManager) ToSign(arg0 context.Context) (*types.SignedTreeHead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSign", arg0)
	ret0, _ := ret[0].(*types.SignedTreeHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToSign indicates an expected call of ToSign.
func (mr *MockStateManagerMockRecorder) ToSign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSign", reflect.TypeOf((*MockStateManager)(nil).ToSign), arg0)
}
